* Python

** list comprehensions
** function
*** map()
map(function, iterable, ...)
遍历 iterable 对象，作为参数传入 function,返回一个 iterable 对象

*** lambda
lambda 是匿名函数的定义方法，并声明传递的参数
lambda 简化了函数定义的书写形式。使代码更为简洁，
#+BEGIN_SRC python
person = 'CIUCIUCIU'
def lower(person,a,b,c):
    return person.lower()
return lambda person,a,b,c:person.lower()
#+END_SRC

#+RESULTS:
: <function main.<locals>.<lambda> at 0x0000018C2D303840>

**** 立刻执行 lambda 函数的方法
很简单，lambda 表达式等价于函数声明而已，使用普通函数的调用方法即可
#+BEGIN_SRC python
person = 'CIUCIUCIU'
return (lambda x:x.lower())(person)

#+END_SRC

#+RESULTS:
: ciuciuciu

** csv
*** reader()
#+BEGIN_SRC python
import csv
with open('Message.csv') as csvfile:
    megs = csv.reader(csvfile)
    for meg in megs:
        # type(meg) = 'list'
        print(meg[1])
        print(','.join(meg))

#+END_SRC
*** DictReader()
#+BEGIN_SRC python
import csv

with open('Messages.csv') as csvfile:
    megs = list(csv.DictReader(csvfile))
    for meg in megs:
        # type(meg) = 'Orderdict'
        # 'email'是其中一个的列头
        print(meg['email'])
        print(meg.keys())

#+END_SRC
*** wirter()
#+BEGIN_SRC python
import csv
with open('file.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow('godlight','love','ciu')

#+END_SRC
*** DictWriter()...
** time
*** time
**** 时间元组
tm_year
tm_mon
tm_mday=13
tm_hour=21
tm_min=17
tm_sec=38
tm_wday=0(周一)
tm_yday=225
tm_isdst=0
**** time.localtime()
 #+BEGIN_SRC python
 import time
 return time.localtime()

 #+END_SRC

 #+RESULTS:
 : time.struct_time(tm_year=2018, tm_mon=8, tm_mday=13, tm_hour=21, tm_min=17, tm_sec=38, tm_wday=0, tm_yday=225, tm_isdst=0)
**** time.asctime()
获取最简单的可读时间模式
#+BEGIN_SRC python
import time
return time.asctime(time.localtime())

#+END_SRC

#+RESULTS:
: Mon Aug 13 21:21:46 2018
**** time.strftime(format[,t])
格式化输出时间戳
#+BEGIN_SRC python
import time
return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
#+END_SRC

#+RESULTS:
: 2018-08-13 21:24:50

*** datetime
**** datetime.datetime.now()
#+BEGIN_SRC python
import datetime
now = datetime.datetime.now()
return now

#+END_SRC

#+RESULTS:
: 2018-08-13 21:34:23.686029
**** datetime.datetime.today()
**** datetime.datetime.fromtimestamp(time.time.())

 #+BEGIN_SRC python
 In [1]: import datetime as dt

 In [8]: import time as tm

 In [15]: tm.time()
 Out[18]: 1534155404.9489682

 In [19]: dtnow = dt.datetime.fromtimestamp(tm.time())

 In [56]: dtnow
 Out[59]: datetime.datetime(2018, 8, 13, 18, 17, 17, 454232)

 In [60]: dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second
 Out[105]: (2018, 8, 13, 18, 17, 17)

 #+END_SRC
**** strftime("%Y-%m-%d %H:%M:%S")
格式化输出时间
#+BEGIN_SRC python
import datetime
return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

#+END_SRC

#+RESULTS:
: 2018-08-13 21:38:58
**** datetime.tiemdelta(days=n)
#+BEGIN_SRC python
import datetime
return datetime.datetime.now() + datetime.timedelta(days=3)

#+END_SRC

#+RESULTS:
: 2018-08-16 21:40:36.812050
**** total_second()
#+BEGIN_SRC python
import datetime
return (datetime.datetime(2015,1,13,12,0,0) - datetime.datetime.now()).total_seconds()

#+END_SRC

#+RESULTS:
: -113046164.546867

*** calendar
#+BEGIN_SRC python
import calendar
return calendar.month(2018,8)

#+END_SRC

#+RESULTS:
: August 2018
: Mo Tu We Th Fr Sa Su
:        1  2  3  4  5
:  6  7  8  9 10 11 12
: 13 14 15 16 17 18 19
: 20 21 22 23 24 25 26
: 27 28 29 30 31

** string
*** rule
 - unicode(string)
 - bytes(utf-8)
 总结起来就是一张图的事
 [[./resources/str.png]]
